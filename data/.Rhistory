#ggraph::scale_edge_color_viridis(option = "B") +
#scale_edge_width(range = c(0.5, 2)) +
theme_graph() +
theme(legend.position="none")
ggraph(g3, my_layout) +
#geom_node_point() +
geom_node_point(aes(colour = betwe, size = grado)) +
geom_edge_link() +
scale_colour_viridis_d() +
scale_size_continuous(range = c(2,7 ))+
#geom_edge_link(mapping = aes(colour = edgeB, width = edgeB/max(edgeB))) +
#ggraph::scale_edge_color_viridis(option = "B") +
#scale_edge_width(range = c(0.5, 2)) +
theme_graph() +
theme(legend.position="none")
ggraph(g3, my_layout) +
#geom_node_point() +
geom_node_point(aes(colour = betwe, size = grado)) +
geom_edge_link() +
scale_colour_viridis_c() +
scale_size_continuous(range = c(2,7 ))+
#geom_edge_link(mapping = aes(colour = edgeB, width = edgeB/max(edgeB))) +
#ggraph::scale_edge_color_viridis(option = "B") +
#scale_edge_width(range = c(0.5, 2)) +
theme_graph() +
theme(legend.position="none")
ggraph(g3, my_layout) +
#geom_node_point() +
geom_node_point(aes(colour = betwe, size = grado)) +
geom_edge_link() +
scale_colour_viridis_c() +
scale_size_continuous(range = c(2,20 ))+
#geom_edge_link(mapping = aes(colour = edgeB, width = edgeB/max(edgeB))) +
#ggraph::scale_edge_color_viridis(option = "B") +
#scale_edge_width(range = c(0.5, 2)) +
theme_graph() +
theme(legend.position="none")
library(tidyverse)
library(igraph)
library(tidygraph)
library(graphlayouts)
library(ggraph)
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
g
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) %>%
geom_node_point() +
geom_edge_arc() +
theme_graph()
ggraph(graph = g, layout = my_layout) +
geom_node_point() +
geom_edge_arc() +
theme_graph()
ggraph(graph = g, layout = my_layout) +
geom_node_point() +
geom_edge_arc0() +
theme_graph()
ggraph(graph = g, layout = my_layout) +
geom_node_point() +
geom_edge_arc2() +
theme_graph()
ggraph(graph = g, layout = my_layout) +
geom_node_point() +
geom_edge_arc2(colour = "purple") +
theme_graph(background = "black")
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue") +
geom_edge_arc2(colour = "purple") +
theme_graph(background = "black")
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue") +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "purple") +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue") +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 33, p.or.m = 0.33, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 33, p.or.m = 0.33, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
#geom_node_point(colour = "purple", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 33, p.or.m = 0.33, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
#geom_node_point(colour = "purple", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 33, p.or.m = 0.33, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
#geom_node_point(colour = "purple", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
g = read.graph(file = "GITS/VeranoMatematicas2020/data/les_miserables.gml")
g = read.graph(file = "GITS/VeranoMatematicas2020/data/les_miserables.gml", "gml")
write.graph(graph = g, "GITS/VeranoMatematicas2020/data/les_miserables.graphml", "graphml"))
write.graph(graph = g, "GITS/VeranoMatematicas2020/data/les_miserables.graphml", "graphml")
set.seed(725)
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 32, p.or.m = 0.32, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
set.seed(19870615)
g = igraph::random.graph.game(n = 33, p.or.m = 0.33, type = "gnp", directed = F, loops = T)
set.seed(19870615)
my_layout = layout.fruchterman.reingold(g)
ggraph(graph = g, layout = my_layout) +
geom_node_point(colour = "blue", size = 4) +
#geom_node_point(colour = "purple", size = 4) +
geom_edge_arc2(colour = "red") +
theme_graph(background = "black")
library(tidyverse)
library(igraph)
library(tidygraph)
library(graphlayouts)
library(ggraph)
vroom::vroom(file = "GITS/VeranoMatematicas2020/data/string_ESR1_ESR2_AR_ERBB2_3vecinos.tsv")
vroom::vroom(file = "GITS/VeranoMatematicas2020/data/string_ESR1_ESR2_AR_ERBB2_3vecinos.tsv") %>%
.[,1:2]
vroom::vroom(file = "GITS/VeranoMatematicas2020/data/string_ESR1_ESR2_AR_ERBB2_3vecinos.tsv") %>%
.[,1:2] %>%
graph_from_data_frame(directed = F)
vroom::vroom(file = "GITS/VeranoMatematicas2020/data/string_ESR1_ESR2_AR_ERBB2_5vecinos.tsv") %>%
.[,1:2] %>%
graph_from_data_frame(directed = F)
vroom::vroom(file = "GITS/VeranoMatematicas2020/data/string_ESR1_ESR2_AR_ERBB2_5vecinos.tsv") %>%
.[,1:2] %>%
graph_from_data_frame(directed = F) %>%
write.graph(file = "GITS/VeranoMatematicas2020/data/string_ReceptoresBrCan.graphml", "graphml")
library(igraph)
library(tidyverse)
my_densities = seq(0.1, 0.9, by = 0.05)
my_densities = seq(0.05, 0.95, by = 0.05)
my_g <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
})
my_g <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
})
my_g
set.seed(725)
g = random.graph.game(n = 100, p.or.m = 0.1, type = "gnp", F, F)
temp <- tempfile()
?file.info
?tempfile
setwd(dir = "GITS/VeranoMatematicas2020/")
?write.graph
get.adjacency(g)
set.seed(725)
g = random.graph.game(n = 100, p.or.m = 0.1, type = "gnp", F, F)
temp = tempfile()
get.adjacency(g) %>% write.csv(file = temp)
get.adjacency(g, sparse = F) #%>% write.csv(file = temp)
set.seed(725)
g = random.graph.game(n = 100, p.or.m = 0.1, type = "gnp", F, F)
temp = tempfile()
get.adjacency(g, sparse = F) %>% write.csv(file = temp)
file.info(temp)
file.info(temp)$size
get.data.frame(g)
get.data.frame(g) %>% write.csv(file = temp)
file.info(temp)$size
unlink(temp)
temp
my_analysis <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
g = igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
temp = tempfile()
get.adjacency(g, sparse = F) %>% write.csv(file = temp)
size_adjacency  = file.info(temp)$size
get.data.frame(g) %>% write.csv(file = temp)
size_edgelist  = file.info(temp)$size
write.graph(g, temp, "graphml")
size_graphml  = file.info(temp)$size
unlink(temp)
rm(temp)
list(size_adjacency = size_adjacency,
size_edgelist  = size_edgelist,
size_graphml   = size_graphml
)
})
my_analysis
setwd(dir = "GITS/VeranoMatematicas2020/")
setwd(dir = "GITS/VeranoMatematicas2020/")
setwd(dir = "~/GITS/VeranoMatematicas2020/")
my_densities = seq(0.05, 0.95, by = 0.05)
names(my_densities) = my_densities
my_analysis <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
g = igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
temp = tempfile()
get.adjacency(g, sparse = F) %>% write.csv(file = temp)
size_adjacency  = file.info(temp)$size
get.data.frame(g) %>% write.csv(file = temp)
size_edgelist  = file.info(temp)$size
write.graph(g, temp, "graphml")
size_graphml  = file.info(temp)$size
unlink(temp)
rm(temp)
data.frame(size_adjacency = size_adjacency,
size_edgelist  = size_edgelist,
size_graphml   = size_graphml
)
})
my_analysis
my_analysis <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
g = igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
temp = tempfile()
get.adjacency(g, sparse = F) %>% write.csv(file = temp)
size_adjacency  = file.info(temp)$size
get.data.frame(g) %>% write.csv(file = temp)
size_edgelist  = file.info(temp)$size
write.graph(g, temp, "graphml")
size_graphml  = file.info(temp)$size
unlink(temp)
rm(temp)
data.frame(size_adjacency = size_adjacency,
size_edgelist  = size_edgelist,
size_graphml   = size_graphml
)
}) %>% bind_rows(.id = linkProb)
my_analysis <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
g = igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
temp = tempfile()
get.adjacency(g, sparse = F) %>% write.csv(file = temp)
size_adjacency  = file.info(temp)$size
get.data.frame(g) %>% write.csv(file = temp)
size_edgelist  = file.info(temp)$size
write.graph(g, temp, "graphml")
size_graphml  = file.info(temp)$size
unlink(temp)
rm(temp)
data.frame(size_adjacency = size_adjacency,
size_edgelist  = size_edgelist,
size_graphml   = size_graphml
)
}) %>% bind_rows(.id = "linkProb")
my_analysis
my_analysis %>%
pivot_longer(cols = -linkProb)
my_analysis <-
lapply(X = my_densities, FUN = function(i){
set.seed(725)
g = igraph::random.graph.game(n = 100,
p.or.m = i,
type = "gnp",
directed = F,
loops = F)
temp = tempfile()
get.adjacency(g, sparse = F) %>% write.csv(file = temp)
size_adjacency  = file.info(temp)$size
get.data.frame(g) %>% write.csv(file = temp)
size_edgelist  = file.info(temp)$size
write.graph(g, temp, "graphml")
size_graphml  = file.info(temp)$size
unlink(temp)
rm(temp)
data.frame(adjacency = size_adjacency,
edgelist  = size_edgelist,
graphml   = size_graphml
)
}) %>% bind_rows(.id = "linkProb")
my_analysis %>%
pivot_longer(cols = -linkProb)
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name))) +
geom_line()
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name))) +
geom_point()
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
group_by(name) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name))) +
geom_line()
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
group_by(name) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name), group = name)) +
geom_line()
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
group_by(name) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name), group = name)) +
geom_line() +
theme_minimal() +
guides(fill=guide_legend(title="Formato de archivo")) +
ylab("tamaño en disco (bytes)") +
xlab("probabilidad de enlace")
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
group_by(name) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name), group = name)) +
geom_line() +
guides(fill=guide_legend(title="Formato de archivo")) +
theme_minimal() +
ylab("tamaño en disco (bytes)") +
xlab("probabilidad de enlace")
my_analysis %>%
pivot_longer(cols = -linkProb) %>%
group_by(name) %>%
ggplot(mapping = aes(linkProb, value, colour = as.factor(name), group = name)) +
geom_line() +
guides(colour=guide_legend(title="Formato de archivo")) +
theme_minimal() +
ylab("tamaño en disco (bytes)") +
xlab("probabilidad de enlace")
g
get.adjacency(g)
get.adjacency(g, sparse = F)
get.adjacency(g, sparse = F)[1:10, 1:10]
set.seed(725)
g = igraph::random.graph.game(n = 100,
p.or.m = 0.1,
type = "gnp",
directed = F,
loops = F)
V(g)$name = c(letters[1:26], paste0("node_", 27:100))
get.adjacency(g, sparse = F)[1:10, 1:10]
get.data.frame(g)
get.data.frame(g) %>% head
get.data.frame(g) %>% head(10)
write.graph(graph = g, file = "ejemplo.graphml", "graphml")
library(igraph)
g <- read.graph(file = "les_miserables.gml", format = "gml")
setwd("data")
g <- read.graph(file = "les_miserables.graphml", format = "graphml")
g
g <- read.graph(file = "les_miserables.graphml", format = "graphml")
plot(g)
vroom::vroom("https://raw.githubusercontent.com/guillermodeandajauregui/useR2019INMEGEN/master/movies.csv") %>%
igraph::graph_from_data_frame()
vroom::vroom("https://raw.githubusercontent.com/guillermodeandajauregui/useR2019INMEGEN/master/movies.csv") %>%
igraph::graph_from_data_frame() %>%
plot()
el_camino = "https://raw.githubusercontent.com/guillermodeandajauregui/useR2019INMEGEN/master/movies.csv"
vroom::vroom(el_camino) #%>%
vroom::vroom(el_camino) %>%
igraph::graph_from_data_frame() %>%
tidygraph::as_tbl_graph() %>%
ggraph::ggraph() +
ggraph::geom_edge_link() +
geom_point(aes(label = name))
vroom::vroom(el_camino) %>%
igraph::graph_from_data_frame() %>%
tidygraph::as_tbl_graph() %>%
ggraph::ggraph() +
ggraph::geom_edge_link() +
geom_point() +
geom_label()
vroom::vroom(el_camino) %>%
igraph::graph_from_data_frame() %>%
tidygraph::as_tbl_graph() %>%
ggraph::ggraph() +
ggraph::geom_edge_link() +
ggraph::geom_node_point() +
ggraph::geom_node_text()
vroom::vroom(el_camino) %>%
igraph::graph_from_data_frame() %>%
tidygraph::as_tbl_graph() %>%
ggraph::ggraph() +
ggraph::geom_edge_link() +
ggraph::geom_node_point() +
ggraph::geom_node_text(aes(label=name))
vroom::vroom(el_camino) %>%
igraph::graph_from_data_frame() %>%
tidygraph::as_tbl_graph() %>%
ggraph::ggraph(layout = "kk") +
ggraph::geom_edge_link() +
ggraph::geom_node_point() +
ggraph::geom_node_text(aes(label=name))
vroom::vroom(el_camino) %>%
igraph::graph_from_data_frame() %>%
tidygraph::as_tbl_graph() %>%
ggraph::ggraph() +
ggraph::geom_edge_link() +
ggraph::geom_node_point() +
ggraph::geom_node_text(aes(label=name), angle = 90)
components(g)
average.path.length(g)
transitivity(g, type = "global")
diameter(g)
m
diameter(g)
V(g)
mi_df_nodos <- get.data.frame(x = g,
what = "vertices")
mi_df_nodos
